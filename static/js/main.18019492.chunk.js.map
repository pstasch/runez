{"version":3,"sources":["board.js","game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","counter","board","row","push","renderSquare","React","Component","Game","state","runeBoard","getStartingLineup","emptySocket","statusMessage","Array","fill","setState","updatedBoard","slice","isSolved","moveIsValid","selectedRunePosition","emptySocketPosition","isValid","runeContent","Math","abs","isStucked","length","handleClick","ReactDOM","render","document","getElementById"],"mappings":"iNAEA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKEC,E,2KACJC,GAAI,IAAD,OACZ,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAQ/E,IAJA,IAAIG,EAAU,EACVC,EAAQ,GAERC,EAAM,GACDL,EAAE,EAAGA,GAAK,EAAGA,IAClBK,EAAIC,KAAKL,KAAKM,aAAaJ,IAC3BA,IAIJ,OAFAC,EAAME,KAAK,yBAAKV,UAAU,aAAaS,IAEhCD,M,GAhBoBI,IAAMC,WCPpBC,E,kDACjB,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CACTC,UAAW,EAAKC,oBAChBC,YAAa,EACbC,cAAe,cALJ,E,gEAUf,IACIf,EADAY,EAAYI,MAAM,GAAGC,KAAK,MAE9B,IAAMjB,EAAI,EAAGA,GAAK,EAAGA,IACjBY,EAAUZ,GAAK,IAEnB,IAAMA,EAAI,EAAGA,GAAK,EAAGA,IACjBY,EAAUZ,GAAK,IAEnB,OAAOY,I,oCAIPX,KAAKiB,SAAU,CACXN,UAAWX,KAAKY,oBAChBC,YAAa,M,kCAKTd,GAER,IAAIe,EAAgB,GAChBI,EAAelB,KAAKU,MAAMC,UAAUQ,QACpCN,EAAcb,KAAKU,MAAMG,YAExBb,KAAKoB,SAASpB,KAAKU,MAAMC,aAKzBZ,GAAKC,KAAKU,MAAMG,cACjBC,EAAgB,8CAGhBd,KAAKqB,YAAaH,EAAcnB,EAAGc,IAEnCC,EAAgB,uCAChBI,EAAaL,GAAeK,EAAanB,GACzCmB,EAAanB,GAAK,KAClBc,EAAcd,IAGdmB,EAAelB,KAAKY,oBACpBC,EAAc,EACdC,EAAgB,wCAIpBd,KAAKiB,SAAS,CACNN,UAAWO,EACXL,YAAaA,EACbC,cAAeA,O,kCAKfX,EAAOmB,EAAsBC,GACrC,IAAIC,GAAU,EACRC,EAActB,EAAMmB,GAW1B,MATmB,KAAfG,EACKH,EAAuBC,IAAsBC,GAAU,GAEvC,KAAfC,GACDH,EAAuBC,IAAsBC,GAAU,GAGzDE,KAAKC,IAAIL,EAAuBC,GAAuB,IAAMC,GAAU,GAEvEA,I,kCAIP,IAAIzB,EACA6B,GAAY,EACVjB,EAAYX,KAAKU,MAAMC,UACvBE,EAAcb,KAAKU,MAAMG,YAE/B,IAAKd,EAAI,EAAGA,EAAIY,EAAUkB,OAAQ9B,IAC9B,GAAIC,KAAKqB,YAAYV,EAAWZ,EAAGc,IAAkC,MAAhBF,EAAUZ,GAAc,CACzE6B,GAAY,EACZ,MAIR,OAAOA,I,iCAIP,IAEI7B,EAFEY,EAAYX,KAAKU,MAAMC,UAI7B,GAAqB,MAAhBA,EAAU,GACX,OAAQ,EAGZ,IAAMZ,EAAI,EAAGA,GAAK,EAAGA,IACjB,GAAsB,KAAjBY,EAAUZ,GACX,OAAO,EAIf,IAAMA,EAAI,EAAGA,GAAK,EAAGA,IACjB,GAAsB,KAAjBY,EAAUZ,GACX,OAAO,EAIf,OAnBe,I,+BAsBT,IAAD,OACDe,EAAgBd,KAAKU,MAAMI,cAQ/B,OAPKd,KAAKoB,SAAUpB,KAAKU,MAAMC,WAC3BG,EAAgB,sBAEVd,KAAK4B,cACXd,EAAgB,0CAIhB,yBAAKnB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIM,QAASD,KAAKU,MAAMC,UACpBf,QAAS,SAACG,GAAD,OAAO,EAAK+B,YAAY/B,OAGzC,yBAAKJ,UAAU,aACX,6BAAMmB,S,GA7IQP,IAAMC,WCGxCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.18019492.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default class Board extends React.Component {\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n    }\r\n\r\n    render() {\r\n        let counter = 0;\r\n        let board = [];\r\n\r\n        let row = [];\r\n        for (let i=0; i <= 6; i++) {\r\n            row.push(this.renderSquare(counter));\r\n            counter++;\r\n        }\r\n        board.push(<div className=\"board-row\">{row}</div>)\r\n\r\n        return board;\r\n    }\r\n}","import React from \"react\";\r\nimport Board from \"./board.js\";\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runeBoard: this.getStartingLineup(),\r\n            emptySocket: 3,\r\n            statusMessage: \"Fang an...\",\r\n        };\r\n    }\r\n\r\n    getStartingLineup() {\r\n        let runeBoard = Array(7).fill(null);\r\n        let i;\r\n        for ( i = 0; i <= 2; i++ ) {\r\n            runeBoard[i] = \"X\";\r\n        }\r\n        for ( i = 4; i <= 6; i++ ) {\r\n            runeBoard[i] = \"Y\";\r\n        }\r\n        return runeBoard;\r\n    }\r\n\r\n    restartGame() {\r\n        this.setState( {\r\n            runeBoard: this.getStartingLineup(),\r\n            emptySocket: 3,\r\n        });\r\n    }\r\n\r\n    // Click on Rune at Position i\r\n    handleClick(i) {\r\n\r\n        let statusMessage = \"\";\r\n        let updatedBoard = this.state.runeBoard.slice();\r\n        let emptySocket = this.state.emptySocket;\r\n\r\n        if ( this.isSolved(this.state.runeBoard) ) {\r\n            return;\r\n        }\r\n\r\n        // Click on empty Socket\r\n        if ( i == this.state.emptySocket) {\r\n            statusMessage = \"Ich habe dich für klüger gehalten...\"\r\n        }\r\n\r\n        if (this.moveIsValid( updatedBoard, i, emptySocket)) {\r\n            // Change Runes\r\n            statusMessage = \"Nicht so blöd wie du aussiehst...\";\r\n            updatedBoard[emptySocket] = updatedBoard[i];\r\n            updatedBoard[i] = null;\r\n            emptySocket = i;\r\n        } else {\r\n            // Reset Board\r\n            updatedBoard = this.getStartingLineup();\r\n            emptySocket = 3;\r\n            statusMessage = \"Du wirst hier nie wieder rauskommen!\"\r\n        }\r\n\r\n\r\n        this.setState({\r\n                runeBoard: updatedBoard,\r\n                emptySocket: emptySocket,\r\n                statusMessage: statusMessage,\r\n            }\r\n        )\r\n    }\r\n\r\n    moveIsValid(board, selectedRunePosition, emptySocketPosition) {\r\n        let isValid = true;\r\n        const runeContent = board[selectedRunePosition];\r\n\r\n        if (runeContent == \"X\") {\r\n            if ( selectedRunePosition > emptySocketPosition ) isValid = false;\r\n        }\r\n        else if ( runeContent == \"Y\") {\r\n            if ( selectedRunePosition < emptySocketPosition ) isValid = false;\r\n        }\r\n\r\n        if ( ( Math.abs(selectedRunePosition - emptySocketPosition) > 2 ) ) isValid = false;\r\n\r\n        return isValid;\r\n    }\r\n\r\n    isStucked() {\r\n        let i;\r\n        let isStucked = true;\r\n        const runeBoard = this.state.runeBoard;\r\n        const emptySocket = this.state.emptySocket;\r\n\r\n        for (i = 0; i < runeBoard.length; i++) {\r\n            if (this.moveIsValid(runeBoard, i, emptySocket) && ( runeBoard[i] != null )) {\r\n                isStucked = false;\r\n                break\r\n            }\r\n        }\r\n\r\n        return isStucked;\r\n    }\r\n\r\n    isSolved() {\r\n        const runeBoard = this.state.runeBoard;\r\n        let isSolved = true;\r\n        let i;\r\n\r\n        if ( runeBoard[3] != null ) {\r\n            return  false;\r\n        }\r\n\r\n        for ( i = 0; i <= 2; i++ ) {\r\n            if ( runeBoard[i]  == \"X\" ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for ( i = 4; i <= 6; i++ ) {\r\n            if ( runeBoard[i]  == \"Y\" ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return isSolved;\r\n    }\r\n\r\n    render() {\r\n        let statusMessage = this.state.statusMessage;\r\n        if ( this.isSolved( this.state.runeBoard ) ) {\r\n            statusMessage = \"Wie kann das sein?!\"\r\n        }\r\n        else if ( this.isStucked() ) {\r\n            statusMessage = \"Versuchs doch noch einmal, Sterblicher\"\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={this.state.runeBoard}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{statusMessage}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './game.js';\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}